<!-- Released under the MIT License.

Copyright (c) 2018 Ntreev Soft co., Ltd.
Copyright (c) 2020 Jeesu Choi

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Forked from https://github.com/NtreevSoft/Ntreev.ModernUI.Framework
Namespaces and files starting with "Ntreev" have been renamed to "JSSoft". -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:jmfc="clr-namespace:JSSoft.ModernUI.Framework.Controls;assembly=JSSoft.ModernUI.Framework"
                    xmlns:jmfv="clr-namespace:JSSoft.ModernUI.Framework.Converters;assembly=JSSoft.ModernUI.Framework"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:xctt="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/JSSoft.ModernUI.Framework;component/Assets/TextBox.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <jmfv:InverseBooleanConverter x:Key="InverseBoolConverter" />

    <DataTemplate x:Key="DefaultWatermark_DataTemplate">
        <ContentControl Content="{Binding}" Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Focusable="False" Margin="0,0,3,0" />
    </DataTemplate>

    <Style x:Key="DateTimePicker_ToggleButton_Style" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid SnapsToDevicePixels="True">
                        <xctk:ButtonChrome x:Name="ToggleButtonChrome" 
                                           CornerRadius="0"
                                           RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:DateTimePicker}}"
                                           RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:DateTimePicker}}"
                                           RenderMouseOver="{TemplateBinding IsMouseOver}"
                                           RenderPressed="{TemplateBinding IsPressed}">

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                <Grid x:Name="ArrowGlyph" IsHitTestVisible="False" Grid.Column="1" Margin="5">
                                    <Path x:Name="Arrow" Width="7" Height="4" Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z" Fill="{DynamicResource WindowText}" />
                                </Grid>
                            </Grid>
                        </xctk:ButtonChrome>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DateTimePicker_Style" TargetType="{x:Type xctk:DateTimePicker}">
        <Setter Property="Background" Value="{DynamicResource InputBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource InputText}" />
        <Setter Property="BorderBrush" Value="{DynamicResource InputBorder}" />
        <Setter Property="BorderThickness" Value="1,1,1,1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="TimeWatermarkTemplate" Value="{StaticResource DefaultWatermark_DataTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Kind" Value="Utc" />
        <Setter Property="TimeFormat" Value="LongTime" />
        <Setter Property="Format" Value="Custom" />
        <Setter Property="FormatString" Value="G" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermark_DataTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:DateTimePicker}">
                    <Grid>
                        <Border x:Name="RootBorder" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <xctk:ButtonSpinner x:Name="PART_Spinner" 
                                                    IsTabStop="False"
                                                    Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="0"
                                                    Padding="0"
                                                    ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}"
                                                    HorizontalContentAlignment="Stretch"
                                                    VerticalContentAlignment="Stretch"
                                                    AllowSpin="{TemplateBinding AllowSpin}"
                                                    ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}">
                                    <xctk:WatermarkTextBox x:Name="PART_TextBox" 
                                                           BorderThickness="0" 
                                                           Background="Transparent"
                                                           ContextMenu="{StaticResource TextBox_ContextMenu}"
                                                           FontFamily="{TemplateBinding FontFamily}" 
                                                           FontSize="{TemplateBinding FontSize}" 
                                                           FontStretch="{TemplateBinding FontStretch}"
                                                           FontStyle="{TemplateBinding FontStyle}" 
                                                           FontWeight="{TemplateBinding FontWeight}" 
                                                           Foreground="{TemplateBinding Foreground}" 
                                                           HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                           VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                           MinWidth="20"
                                                           AcceptsReturn="False"
                                                           Padding="{TemplateBinding Padding}"
                                                           TextAlignment="{TemplateBinding TextAlignment}"
                                                           TextWrapping="NoWrap" 
                                                           Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                                           TabIndex="{TemplateBinding TabIndex}" />
                                </xctk:ButtonSpinner>
                                <ToggleButton x:Name="_calendarToggleButton"
                                              Grid.Column="1"
                                              Background="White"
                                              Focusable="False"
                                              IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{StaticResource DateTimePicker_ToggleButton_Style}"
                                              IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                              IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}" />
                            </Grid>
                        </Border>
                        <Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}" StaysOpen="False">
                            <Border BorderThickness="1" Padding="1 0 1 0"
                                    Background="{DynamicResource PopupBackground}" 
                                    BorderBrush="{DynamicResource WindowBorderActive}">
                                <StackPanel>
                                    <Calendar x:Name="PART_Calendar" BorderThickness="0" />
                                    <xctk:TimePicker x:Name="PART_TimeUpDown"
                                                     Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                                                     Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" 
                                                     Format="{TemplateBinding TimeFormat}"
                                                     FormatString="{TemplateBinding TimeFormatString}"
                                                     Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}"
                                                     Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
                                                     Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}"
                                                     Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}"
                                                     ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}"
                                                     AllowSpin="{TemplateBinding TimePickerAllowSpin}"
                                                     ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}"
                                                     Visibility="{TemplateBinding TimePickerVisibility}" />
                                </StackPanel>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource InputBorderHover}" />
                            <Setter Property="Background" Value="{DynamicResource InputBackgroundHover}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="IsReadOnly" Value="True" TargetName="PART_TextBox" />
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static xctt:ResourceKeys.ControlSelectedBorderKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PART_TextBox" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_TextBox}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type xctk:DateTimePicker}" BasedOn="{StaticResource DateTimePicker_Style}" />

</ResourceDictionary>
