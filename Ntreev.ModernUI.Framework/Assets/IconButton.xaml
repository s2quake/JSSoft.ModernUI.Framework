<!--===================================================================================================================
Released under the MIT License.
    
Copyright (c) 2018 Ntreev Soft co., Ltd.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation the 
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit 
persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the 
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
====================================================================================================================-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:nmfc="clr-namespace:Ntreev.ModernUI.Framework.Controls"
                    xmlns:nmfv="clr-namespace:Ntreev.ModernUI.Framework.Converters">

    <nmfv:RoutedUICommandToStringConverter x:Key="CommandToTooltipConverter" />
    <nmfv:DisplayNameInputGestureToStringConverter x:Key="DisplayNameInputGestureToStringConverter" />

    <ControlTemplate x:Key="IconButton_Template" TargetType="{x:Type nmfc:IconButton}">
        <Border x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Popup Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" Placement="Bottom" Margin="1" StaysOpen="False"
                       IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                    <Grid Margin="4">
                        <Border Background="#0C000000" BorderBrush="#0F000000" BorderThickness="1" CornerRadius="2.5" Margin="-1" />
                        <Border Background="#0A000000" BorderBrush="#0C000000" BorderThickness="1" CornerRadius="2.75" Margin="-2" />
                        <Border x:Name="DropDownBorder" BorderThickness="1" Margin="0 -1 0 0"
                                Background="{DynamicResource PopupBackground}" BorderBrush="{DynamicResource WindowBorderActive}">
                            <ContentControl ContentTemplate="{TemplateBinding DropDownTemplate}" />
                        </Border>
                    </Grid>
                </Popup>
                <ContentPresenter x:Name="Presenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                <Border x:Name="Separator" Grid.Column="1" Width="1" Background="{DynamicResource WindowBackground}" />
                <ToggleButton x:Name="DropDownButton" Grid.Column="2" Padding="2 0" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                              Background="{TemplateBinding Background}" BorderThickness="0" ClickMode="Press">
                    <Path x:Name="Arrow" Data="M0,0 L3,3 6,0" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                </ToggleButton>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ButtonTextDisabled}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ButtonBackgroundHover}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderHover}" />
                <Setter Property="Foreground" Value="{DynamicResource ButtonTextHover}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderPressed}" />
                <Setter Property="Foreground" Value="{DynamicResource ButtonTextPressed}" />
            </Trigger>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderPressed}" />
                <Setter Property="Foreground" Value="{DynamicResource ButtonTextPressed}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" TargetName="Chrome" Value="{DynamicResource Accent}" />
            </Trigger>
            <Trigger Property="DropDownTemplate" Value="{x:Null}">
                <Setter TargetName="Separator" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="DropDownButton" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type nmfc:IconButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template" Value="{StaticResource IconButton_Template}" />
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        <Setter Property="ToolTip" Value="{Binding Path=Command, RelativeSource={RelativeSource Self}, Converter={StaticResource CommandToTooltipConverter}}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <nmfc:IconImage Source="{Binding Source, RelativeSource={RelativeSource AncestorType={x:Type nmfc:IconButton}}}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBar_IconButton_Style" TargetType="{x:Type nmfc:IconButton}" BasedOn="{StaticResource {x:Type nmfc:IconButton}}">
        <Setter Property="Height" Value="22" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="BorderThickness" Value="0" />
        <!--<Setter Property="Padding" Value="0" />-->
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        <Setter Property="ToolTip" Value="{Binding Path=Command, RelativeSource={RelativeSource Self}, Converter={StaticResource CommandToTooltipConverter}}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <nmfc:IconImage Source="{Binding Source, RelativeSource={RelativeSource AncestorType={x:Type nmfc:IconButton}}}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IToolBarItem_IconButton_Style" TargetType="{x:Type nmfc:IconButton}" BasedOn="{StaticResource ToolBar_IconButton_Style}">
        <Setter Property="ToolTip">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource DisplayNameInputGestureToStringConverter}">
                    <Binding Path="DisplayName" />
                    <Binding Path="InputGesture" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
        <Setter Property="Command" Value="{Binding Command}" />
        <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type nmfc:ModernToolBar}}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsVisible}" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>