<!--===================================================================================================================
Released under the MIT License.
    
Copyright (c) 2018 Ntreev Soft co., Ltd.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation the 
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit 
persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the 
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
====================================================================================================================-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:cal="http://www.caliburnproject.org"
                    xmlns:nmfc="clr-namespace:Ntreev.ModernUI.Framework.Controls"
                    xmlns:nmfv="clr-namespace:Ntreev.ModernUI.Framework.Converters">

    <nmfv:RoutedUICommandToStringConverter x:Key="commandToTooltipConverter" />
    <nmfv:DisplayNameInputGestureToStringConverter x:Key="DisplayNameInputGestureToStringConverter" />

    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource SeparatorBackground}" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Width="1" Background="{DynamicResource WindowTextReadOnly}" BorderThickness="0 0 1 0 " BorderBrush="{DynamicResource SeparatorBackground}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="2 2 2 1" />
    </Style>

    <Style x:Key="ExpandableToolBar_Thumb_Style" TargetType="{x:Type Thumb}">
        <Setter Property="Cursor" Value="SizeAll" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Margin="0 3 0 3"
                            Background="Transparent"
                            SnapsToDevicePixels="True">
                        <Rectangle Width="4.9">
                            <Rectangle.Fill>
                                <!--  Brush similar to visual studio, can be improved  -->
                                <DrawingBrush TileMode="Tile"
                                              Viewbox="0,0,5,4"
                                              ViewboxUnits="Absolute"
                                              Viewport="0,0,5,4"
                                              ViewportUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <GeometryDrawing Brush="{DynamicResource WindowText}">
                                            <GeometryDrawing.Geometry>
                                                <GeometryGroup>
                                                    <GeometryGroup.Children>
                                                        <RectangleGeometry Rect="0,0,1,1" />
                                                        <RectangleGeometry Rect="4,0,1,1" />
                                                        <RectangleGeometry Rect="2,2,1,1" />
                                                    </GeometryGroup.Children>
                                                </GeometryGroup>
                                            </GeometryDrawing.Geometry>
                                        </GeometryDrawing>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandableToolBar_OverflowButton_Style" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Name="Bd"
                            Background="Transparent"
                            SnapsToDevicePixels="True">
                        <Grid>
                            <!--  Overflow button similar to visual studio  -->
                            <Rectangle Name="Rectangle"
                                       Width="6"
                                       Height="1"
                                       Margin="2 8"
                                       VerticalAlignment="Bottom"
                                       Fill="{DynamicResource WindowText}" />
                            <Path Name="Arrow"
                                  Margin="2 3"
                                  VerticalAlignment="Bottom"
                                  Fill="{DynamicResource WindowText}"
                                  Data="M 0 0 L 6 0 3 3 Z" />
                            <ContentPresenter />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource ButtonTextHover}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource ButtonTextHover}" />
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ButtonBackgroundHover}" />
                        </Trigger>
                        <!--<Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Accent}" />
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource GrayBrush7}" />
                            <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource Accent}" />
                        </Trigger>-->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource ButtonBackgroundPressed}" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource ButtonBackgroundPressed}" />
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ButtonTextPressed}" />
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource TransparentWhiteBrush}" />
                            <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource TransparentWhiteBrush}" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBar_IconButton_Style" TargetType="{x:Type nmfc:IconButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Width" Value="22" />
        <Setter Property="Height" Value="22" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        <Setter Property="ToolTip" Value="{Binding Path=Command, RelativeSource={RelativeSource Self}, Converter={StaticResource commandToTooltipConverter}}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <nmfc:IconImage Source="{Binding Source, RelativeSource={RelativeSource AncestorType={x:Type nmfc:IconButton}}}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandableToolBar_IconButton_Style" TargetType="{x:Type nmfc:IconButton}" BasedOn="{StaticResource ToolBar_IconButton_Style}">
        <Setter Property="ToolTip">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource DisplayNameInputGestureToStringConverter}">
                    <Binding Path="DisplayName" />
                    <Binding Path="InputGesture" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
        <Setter Property="Command" Value="{Binding Command}" />
        <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type nmfc:ExpandableToolBar}}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsVisible}" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ExpandableToolBar_Button_Style" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Width" Value="22" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ToolTip" Value="{Binding DisplayName}" />
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        <Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
        <Setter Property="Command" Value="{Binding Command}" />
        <Setter Property="CommandParameter" Value="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type nmfc:ExpandableToolBar}}}" />
    </Style>

    <Style x:Key="ExpandableToolBar_ItemContainer_Style" TargetType="{x:Type ContentControl}">
        <Setter Property="Content" Value="{Binding Icon}" />
        <Style.Resources>
            <Style TargetType="{x:Type nmfc:IconButton}" BasedOn="{StaticResource ExpandableToolBar_IconButton_Style}" />
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ExpandableToolBar_Button_Style}" />
        </Style.Resources>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsVisible}" Value="False">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <nmfc:ToolBarItemStyleSelector x:Key="ToolBarItemStyleSelector" Style="{StaticResource ExpandableToolBar_ItemContainer_Style}" />

    <Style TargetType="{x:Type nmfc:ExpandableToolBar}">
        <Style.Resources>
            <Style TargetType="{x:Type nmfc:IconButton}" BasedOn="{StaticResource ToolBar_IconButton_Style}" />
            <!--<Style TargetType="{x:Type Separator}" BasedOn="{StaticResource Vertical_Separator_Style}" />-->
        </Style.Resources>
        <Setter Property="Background" Value="{DynamicResource WindowBackground}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ToolBarTray.IsLocked" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type nmfc:ExpandableToolBar}">
                    <Border x:Name="Border"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}" >
                        <DockPanel>
                            <ToggleButton Style="{StaticResource ExpandableToolBar_OverflowButton_Style}"
                                          x:Name="OverflowButton"
                                          ClickMode="Press"
                                          DockPanel.Dock="Right"
                                          IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          IsEnabled="{TemplateBinding HasOverflowItems}">
                                <Popup x:Name="OverflowPopup"
                                       AllowsTransparency="True"
                                       Focusable="false"
                                       IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                       Placement="Bottom"
                                       PopupAnimation="Slide"
                                       StaysOpen="false">
                                    <Border x:Name="DropDownBorder"
                                            Background="{DynamicResource ControlBackgroundBrush}"
                                            BorderBrush="{DynamicResource ControlBorderBrush}"
                                            BorderThickness="1">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                                              Margin="2"
                                                              FocusVisualStyle="{x:Null}"
                                                              Focusable="True"
                                                              KeyboardNavigation.DirectionalNavigation="Cycle"
                                                              KeyboardNavigation.TabNavigation="Cycle"
                                                              WrapWidth="200" />
                                    </Border>
                                </Popup>
                            </ToggleButton>

                            <Thumb x:Name="ToolBarThumb" Width="10" Style="{StaticResource ExpandableToolBar_Thumb_Style}" />

                            <ToolBarPanel x:Name="PART_ToolBarPanel" Margin="0 1 2 2" IsItemsHost="True" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="True">
                            <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="HasOverflowItems" Value="False">
                            <Setter TargetName="OverflowButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="True">
                            <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="cal:Bind.Model" Value="{Binding}" />
        <Setter Property="ItemContainerStyleSelector" Value="{StaticResource ToolBarItemStyleSelector}" />
    </Style>

</ResourceDictionary>